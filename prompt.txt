以下を満たすサーバアプリ及びwebクライアントアプリを書いて。

render.comで動かすことを想定しており、サーバ部分はnode.jsで作成する。
各ユーザがユーザ名を入力してシステムに接続する
部屋の名前、ルール(通常スコアorEXスコア)、必要に応じてパスワードを設定して部屋を作成する。
あとから来たユーザは一覧から部屋を選択して入室する。ルール・部屋名・人数を確認できる。
部屋メンバはプレイヤー(python経由)か観戦者(web経由)かを表示するようにする。
観戦者はスコア集計及び獲得ポイント計算から除外する。
クライアントから通常スコア、EXスコアを受信し、選択されたルールに応じてプレイヤー内での順位を表示する
全プレイヤーから曲終了の通知を受け取ったらその曲の順位を確定し、1位の人に2pt、2位の人に1ptを付与する。
通話やチャットをしながら使う想定をしており、プレイ中の曲の照合は行わない。
初期状態または全員がプレー完了した状態で、次にプレーヤーがスコアを送ってきた時点で次の曲の集計を開始する。
プレーヤーが複数人いる状態で誰かがスコアを送信し始めた際に、プレイ不可能な人がいる場合は、部屋主がその人を観戦者に切り替えることで終了処理がハングしないようにできる。
サーバ側にRestAPIを用意し、システムへの接続・入室・退室・スコア送信(通常スコアとEXスコアは常に同時に送られる)・曲終了を各クライアントから送信できるようにする。将来的にはPythonのクライアントアプリからスコアを送れるようにする。
API経由・Webクライアント経由で部屋に入室した時にすぐにメンバ一覧に反映する。
Webクライアントを閉じたときにはすぐにメンバ一覧に反映する。
チャット機能も用意する。


(Webクライアント)
部屋作成ができる
部屋に入室して、プレイヤーか観戦者を切り替えることができる
順位や獲得ポイントの確認ができる
自分が誰であるか、部屋主が誰であるかが一目でわかる
部屋主はメンバーのkickや部屋の削除を行うことができる
部屋主がログアウトしたときは一番上の人に部屋主の権限を委譲する
部屋主は獲得ポイントのリセットができる
部屋主は各メンバーがプレイヤーか観戦者かを切り替えることができる。webクライアントからはスコアを送信できないので、できればRestAPI経由のユーザのみを切り替えられるようにする。
